/**
 * @logue/reverb
 *
 * @description JavaScript Reverb effect class
 * @author Logue <logue@hotmail.co.jp>
 * @copyright 2019-2022 By Masashi Yoshikawa All rights reserved.
 * @license MIT
 * @version 1.1.0
 * @see {@link https://github.com/logue/Reverb.js}
 */

(function(l,h){typeof exports=="object"&&typeof module<"u"?module.exports=h():typeof define=="function"&&define.amd?define(h):(l=typeof globalThis<"u"?globalThis:l||self,l.Reverb=h())})(this,function(){"use strict";const l={BLUE:"blue",GREEN:"green",PINK:"pink",RED:"red",VIOLET:"violet",WHITE:"white",BROWN:"red"},h=1/2**32;class j{float(e=1){return this.int()*h*e}norm(e=1){return(this.int()*h-.5)*2*e}minmax(e,s){return this.float()*(s-e)+e}minmaxInt(e,s){return e|=0,s|=0,e+(this.float()*(s-e)|0)}}const m=Math.random;class S extends j{int(){return m()*4294967296>>>0}float(e=1){return m()*e}norm(e=1){return(m()-.5)*2*e}}const a=new S,k={noise:l.WHITE,scale:2,peaks:2,randomAlgorithm:a,decay:2,delay:0,reverse:!1,time:2,filterType:"lowpass",filterFreq:2200,filterQ:1,mix:.5,once:!1},y={version:"1.1.0",date:"2022-10-04T02:13:31.946Z"},b=(t,e,s)=>{const o=new Array(t);for(let n=0;n<t;n++)o[n]=s.norm(e);return o},R=t=>t.reduce((e,s)=>e+s,0);function*N(t,e){const s=[t[Symbol.iterator](),e[Symbol.iterator]()];for(let o=0;;o^=1){const n=s[o].next();if(n.done)return;yield n.value}}function*v(t=2,e=1,s=a){const o=b(t,e,s);o.forEach((i,u)=>o[u]=u&1?i:-i);const n=1/t;let r=R(o);for(let i=0,u=-1;;++i>=t&&(i=0))r-=o[i],r+=o[i]=u*s.norm(e),u^=4294967294,yield u*r*n}const T=(t=2,e=1,s=a)=>N(v(t,e,s),v(t,e,s)),G=t=>{let e=32;return t&=-t,t&&e--,t&65535&&(e-=16),t&16711935&&(e-=8),t&252645135&&(e-=4),t&858993459&&(e-=2),t&1431655765&&(e-=1),e};function*A(t=8,e=1,s=a){const o=b(t,e,s),n=1/t;let r=R(o);for(let i=0;;i=i+1>>>0){const u=G(i)%t;r-=o[u],r+=o[u]=s.norm(e),yield r*n}}function*g(t=2,e=1,s=a){const o=b(t,e,s),n=1/t;let r=R(o);for(let i=0;;++i>=t&&(i=0))r-=o[i],r+=o[i]=s.norm(e),yield r*n}const $=(t=2,e=1,s=a)=>N(g(t,e,s),g(t,e,s));function*w(t=1,e=a){for(;;)yield e.norm(t)}const x=(t,e)=>t!=null&&typeof t[e]=="function",F=t=>x(t,"xform")?t.xform():t,C=t=>t!=null&&typeof t[Symbol.iterator]=="function";class d{constructor(e){this.value=e}deref(){return this.value}}const B=t=>new d(t),D=t=>t instanceof d,L=t=>t instanceof d?t:new d(t),I=t=>t instanceof d?t.deref():t,Q=(t,e)=>[t,s=>s,e];function W(t){return t?[...t]:Q(()=>[],(e,s)=>(e.push(s),e))}function*q(t,e){const s=F(t)(W()),o=s[1],n=s[2];for(let r of e){const i=n([],r);if(D(i)){yield*I(o(i.deref()));return}i.length&&(yield*i)}yield*I(o([]))}const H=(t,e)=>[t[0],t[1],e];function E(t,e){return C(e)?q(E(t),e):s=>{const o=s[2];let n=t;return H(s,(r,i)=>--n>0?o(r,i):n===0?L(o(r,i)):B(r))}}class f{constructor(e,s){this.noise=w,this.ctx=e,this.options={...k,...s},this.wetGainNode=this.ctx.createGain(),this.dryGainNode=this.ctx.createGain(),this.filterNode=this.ctx.createBiquadFilter(),this.convolverNode=this.ctx.createConvolver(),this.outputNode=this.ctx.createGain(),this.isConnected=!1,this.setNoise(this.options.noise),this.buildImpulse(),this.mix(this.options.mix)}connect(e){return this.isConnected&&this.options.once?(this.isConnected=!1,this.outputNode):(this.convolverNode.connect(this.filterNode),this.filterNode.connect(this.wetGainNode),e.connect(this.convolverNode),e.connect(this.dryGainNode).connect(this.outputNode),e.connect(this.wetGainNode).connect(this.outputNode),this.isConnected=!0,this.outputNode)}disconnect(e){return this.isConnected&&(this.convolverNode.disconnect(this.filterNode),this.filterNode.disconnect(this.wetGainNode)),this.isConnected=!1,e}mix(e){if(!this.inRange(e,0,1))throw new RangeError("[Reverb.js] Dry/Wet ratio must be between 0 to 1.");this.options.mix=e,this.dryGainNode.gain.value=1-this.options.mix,this.wetGainNode.gain.value=this.options.mix,console.debug(`[Reverb.js] Set dry/wet ratio to ${e*100}%`)}time(e){if(!this.inRange(e,1,50))throw new RangeError("[Reverb.js] Time length of inpulse response must be less than 50sec.");this.options.time=e,this.buildImpulse(),console.debug(`[Reverb.js] Set inpulse response time length to ${e}sec.`)}decay(e){if(!this.inRange(e,0,100))throw new RangeError("[Reverb.js] Inpulse Response decay level must be less than 100.");this.options.decay=e,this.buildImpulse(),console.debug(`[Reverb.js] Set inpulse response decay level to ${e}.`)}delay(e){if(!this.inRange(e,0,100))throw new RangeError("[Reverb.js] Inpulse Response delay time must be less than 100.");this.options.delay=e,this.buildImpulse(),console.debug(`[Reverb.js] Set inpulse response delay time to ${e}sec.`)}reverse(e){this.options.reverse=e,this.buildImpulse(),console.debug(`[Reverb.js] Inpulse response is ${e?"":"not "}reversed.`)}filterType(e){this.filterNode.type=this.options.filterType=e,console.debug(`[Reverb.js] Set filter type to ${e}`)}filterFreq(e){if(!this.inRange(e,20,2e4))throw new RangeError("[Reverb.js] Filter frequrncy must be between 20 and 20000.");this.options.filterFreq=e,this.filterNode.frequency.value=this.options.filterFreq,console.debug(`[Reverb.js] Set filter frequency to ${e}Hz.`)}filterQ(e){if(!this.inRange(e,0,10))throw new RangeError("[Reverb.js] Filter quality value must be between 0 and 10.");this.options.filterQ=e,this.filterNode.Q.value=this.options.filterQ,console.debug(`[Reverb.js] Set filter Q to ${e}.`)}peaks(e){this.options.peaks=e,this.buildImpulse(),console.debug(`[Reverb.js] Set IR source noise peaks to ${e}.`)}scale(e){this.options.scale=e,this.buildImpulse(),console.debug(`[Reverb.js] Set IR source noise scale to ${e}.`)}randomAlgorithm(e){this.options.randomAlgorithm=e,this.buildImpulse(),console.debug(`[Reverb.js] Set IR source noise generator to ${e}.`)}setNoise(e){switch(this.options.noise=e,e){case l.BLUE:this.noise=v;break;case l.GREEN:this.noise=T;break;case l.PINK:this.noise=A;break;case l.RED:case l.BROWN:this.noise=g;break;case l.VIOLET:this.noise=$;break;default:this.noise=w;break}this.buildImpulse(),console.debug(`[Reverb.js] Set IR generator source noise type to ${e}.`)}setRandomAlgorythm(e){this.options.randomAlgorithm=e,this.buildImpulse()}inRange(e,s,o){return(e-s)*(e-o)<=0}buildImpulse(){const e=this.ctx.sampleRate,s=Math.max(e*this.options.time,1),o=e*this.options.delay,n=this.ctx.createBuffer(2,s,e),r=new Float32Array(s),i=new Float32Array(s),u=this.getNoise(s),M=this.getNoise(s);for(let c=0;c<s;c++){let p=0;c<o?(r[c]=0,i[c]=0,p=this.options.reverse?s-(c-o):c-o):p=this.options.reverse?s-c:c,r[c]=u[c]*(1-p/s)**this.options.decay,i[c]=M[c]*(1-p/s)**this.options.decay}n.getChannelData(0).set(r),n.getChannelData(1).set(i),this.convolverNode.buffer=n}getNoise(e){return[...E(e,this.options.noise===l.WHITE?this.noise(this.options.peaks,this.options.randomAlgorithm):this.noise(this.options.peaks,this.options.scale,this.options.randomAlgorithm))]}}return f.version=y.version,f.build=y.date,window.Reverb||(window.Reverb=f),f});
