/*! For license information please see reverb.min.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Reverb",[],t):"object"==typeof exports?exports.Reverb=t():e.Reverb=t()}("undefined"!=typeof self?self:this,(function(){return(()=>{"use strict";var e={35:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default={version:"0.4.4",date:"2021-09-14T00:42:46.926Z"}},804:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NoiseType=void 0,function(e){e[e.WHITE=0]="WHITE",e[e.PINK=1]="PINK",e[e.BROWN=2]="BROWN"}(t.NoiseType||(t.NoiseType={}))},850:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(35)),n=i(804);class r{version;build;ctx;wetGainNode;dryGainNode;filterNode;convolverNode;outputNode;_options;isConnected;constructor(e,t){this.version=o.default.version,this.build=o.default.date,this.ctx=e,this._options={...h,...t},this.wetGainNode=this.ctx.createGain(),this.dryGainNode=this.ctx.createGain(),this.filterNode=this.ctx.createBiquadFilter(),this.convolverNode=this.ctx.createConvolver(),this.outputNode=this.ctx.createGain(),this.isConnected=!1,this.buildImpulse()}connect(e){return this.isConnected||(this.convolverNode.connect(this.filterNode),this.filterNode.connect(this.wetGainNode),e.connect(this.convolverNode),e.connect(this.dryGainNode).connect(this.outputNode),e.connect(this.wetGainNode).connect(this.outputNode),this.mix(this._options.mix),this.isConnected=!0),this.outputNode}disconnect(e){return this.isConnected&&(this.convolverNode.disconnect(this.filterNode),this.filterNode.disconnect(this.wetGainNode)),this.isConnected=!1,e}mix(e){if(!this.inRange(e,0,1))throw new RangeError("Reverb.js: Dry/Wet ratio must be between 0 to 1.");this._options.mix=e,this.dryGainNode.gain.value=1-this._options.mix,this.wetGainNode.gain.value=this._options.mix}time(e){if(!this.inRange(e,1,50))throw new RangeError("Reverb.js: Time length of inpulse response must be less than 50sec.");this._options.time=e,this.buildImpulse()}decay(e){if(!this.inRange(e,0,100))throw new RangeError("Reverb.js: Inpulse Response decay level must be less than 100.");this._options.decay=e,this.buildImpulse()}delay(e){if(!this.inRange(e,0,100))throw new RangeError("Reverb.js: Inpulse Response delay time must be less than 100.");this._options.delay=e,this.buildImpulse()}reverse(e){this._options.reverse=e,this.buildImpulse()}filterType(e){this.filterNode.type=this._options.filterType=e}filterFreq(e){if(!this.inRange(e,20,5e3))throw new RangeError("Reverb.js: Filter frequrncy must be between 20 and 5000.");this._options.filterFreq=e,this.filterNode.frequency.value=this._options.filterFreq}filterQ(e){if(!this.inRange(e,0,10))throw new RangeError("Reverb.js: Filter quality value must be between 0 and 10.");this._options.filterQ=e,this.filterNode.Q.value=this._options.filterQ}setNoise(e){this._options.noise=e,this.buildImpulse()}inRange(e,t,i){return(e-t)*(e-i)<=0}buildImpulse(){const e=this.ctx.sampleRate,t=Math.max(e*this._options.time,1),i=e*this._options.delay,s=this.ctx.createBuffer(2,t,e),o=new Float32Array(t),h=new Float32Array(t),a=[0,0,0,0,0,0,0];for(let e=0;e<t;e++){let s=0;switch(e<i?(o[e]=0,h[e]=0,s=this._options.reverse?t-(e-i):e-i):s=this._options.reverse?t-e:e,this._options.noise){default:case n.NoiseType.WHITE:o[e]=r.whiteNoise(),h[e]=r.whiteNoise();break;case n.NoiseType.PINK:a[0]=.99886*a[0]+.0555179*r.whiteNoise(),a[1]=.99332*a[1]+.0750759*r.whiteNoise(),a[2]=.969*a[2]+.153852*r.whiteNoise(),a[3]=.8665*a[3]+.3104856*r.whiteNoise(),a[4]=.55*a[4]+.5329522*r.whiteNoise(),a[5]=-.7616*a[5]-.016898*r.whiteNoise(),o[e]=a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+.5362*r.whiteNoise(),h[e]=a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+.5362*r.whiteNoise(),o[e]*=.11,h[e]*=.11,a[6]=.115926*r.whiteNoise();break;case n.NoiseType.BROWN:o[e]=(a[0]+.02*r.whiteNoise())/1.02,a[0]=o[e],h[e]=(a[1]+.02*r.whiteNoise())/1.02,a[1]=h[e],o[e]*=3.5,h[e]*=3.5}o[e]*=(1-s/t)**this._options.decay,h[e]*=(1-s/t)**this._options.decay}s.getChannelData(0).set(o),s.getChannelData(1).set(h),this.convolverNode.buffer=s}static whiteNoise(){return 2*Math.random()-1}}t.default=r;const h={noise:n.NoiseType.WHITE,decay:2,delay:0,reverse:!1,time:1.1,filterType:"lowpass",filterFreq:2200,filterQ:1,mix:.5}}},t={};return function i(s){var o=t[s];if(void 0!==o)return o.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}(850)})()}));