/*! @logue/reverb v0.3.0 | Logue | license: MIT | build: 2020-11-05T05:45:00.711Z */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Reverb", [], factory);
	else if(typeof exports === 'object')
		exports["Reverb"] = factory();
	else
		root["Reverb"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Reverb.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Meta.ts":
/*!*********************!*\
  !*** ./src/Meta.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated by the build system.
const meta = {
    version: '0.3.0',
    date: '2020-11-05T05:45:00.711Z',
};
exports.default = meta;


/***/ }),

/***/ "./src/Reverb.ts":
/*!***********************!*\
  !*** ./src/Reverb.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Meta_1 = __webpack_require__(/*! ./Meta */ "./src/Meta.ts");
/**
 * JS reverb effect class
 *
 * @author    Logue <logue@hotmail.co.jp>
 * @copyright 2019-2020 Masashi Yoshikawa <https://logue.dev/> All rights reserved.
 * @license   MIT
 * @see       {@link https://github.com/logue/Reverb.js}
 *            {@link https://github.com/web-audio-components/simple-reverb}
 */
class Reverb {
    /**
     * constructor
     * @param {AudioContext} ctx Root AudioContext
     * @param {OptionInterface} options Configure
     */
    constructor(ctx, options) {
        // バージョン情報など
        this.version = Meta_1.default.version;
        this.build = Meta_1.default.date;
        // マスターのAudioContextを取得
        this.ctx = ctx;
        // デフォルト値をマージ
        this._options = { ...optionDefaults, ...options };
        // 初期化
        this.wetGainNode = this.ctx.createGain();
        this.dryGainNode = this.ctx.createGain();
        this.filterNode = this.ctx.createBiquadFilter();
        this.convolverNode = this.ctx.createConvolver();
        this.outputNode = this.ctx.createGain();
        this.isConnected = false;
        // インパルス応答を生成
        this.buildImpulse();
    }
    /**
     * connect
     * @param {AudioNode} sourceNode リバーブエフェクトをかけたいノード
     * @return {AudioNode}
     */
    connect(sourceNode) {
        // 畳み込みノードをウェットレベルに接続
        this.convolverNode.connect(this.filterNode);
        // フィルタノードをウェットレベルに接続
        this.filterNode.connect(this.wetGainNode);
        // 入力ノードを畳み込みノードに接続
        sourceNode.connect(this.convolverNode);
        // ドライレベルを出力ノードに接続
        sourceNode.connect(this.dryGainNode).connect(this.outputNode);
        // ウェットレベルを出力ノードに接続
        sourceNode.connect(this.wetGainNode).connect(this.outputNode);
        // 接続済みフラグを立てる
        this.isConnected = true;
        return this.outputNode;
    }
    /**
     * disconnect
     * @param {AudioNode} sourceNode リバーブエフェクトをかけたいノード
     * @return {AudioNode}
     */
    disconnect(sourceNode) {
        // 初期状態ではノードがつながっていないためエラーになる
        if (this.isConnected) {
            // 畳み込みノードをウェットレベルから切断
            this.convolverNode.disconnect(this.filterNode);
            // フィルタノードをウェットレベルから切断
            this.filterNode.disconnect(this.wetGainNode);
        }
        // 接続済みフラグを解除
        this.isConnected = false;
        // そのままノードを返す（他のAPIに似せるため）
        return sourceNode;
    }
    /**
     * Dry/Wet ratio
     * @param {number} mix
     */
    mix(mix) {
        if (!this.inRange(mix, 0, 1)) {
            throw new RangeError('Reverb.js: Dry/Wet ratio must be between 0 to 1.');
        }
        this._options.mix = mix;
        this.dryGainNode.gain.value = 1 - this._options.mix;
        this.wetGainNode.gain.value = this._options.mix;
        console.debug(`Reverb.js: Set dry/wet ratio to ${mix * 100}%`);
    }
    /**
     * Set Impulse Response time length (second)
     * @param {number} value
     */
    time(value) {
        if (!this.inRange(value, 1, 50)) {
            throw new RangeError('Reverb.js: Time length of inpulse response must be less than 50sec.');
        }
        this._options.time = value;
        this.buildImpulse();
        console.info(`Reverb.js: Set inpulse response time length to ${value}sec.`);
    }
    /**
     * Impulse response decay rate.
     * @param {number} value
     */
    decay(value) {
        if (!this.inRange(value, 0, 100)) {
            throw new RangeError('Reverb.js: Inpulse Response decay level must be less than 100.');
        }
        this._options.decay = value;
        this.buildImpulse();
        console.debug(`Reverb.js: Set inpulse response decay level to ${value}.`);
    }
    /**
     * Impulse response delay time. (NOT deley effect)
     * @param {number} value
     */
    delay(value) {
        if (!this.inRange(value, 0, 100)) {
            throw new RangeError('Reverb.js: Inpulse Response delay time must be less than 100.');
        }
        this._options.delay = value;
        this.buildImpulse();
        console.debug(`Reverb.js: Set inpulse response delay time to ${value}sec.`);
    }
    /**
     * Reverse the impulse response.
     * @param {boolean} reverse
     */
    reverse(reverse) {
        this._options.reverse = reverse;
        this.buildImpulse();
        console.debug(`Reverb.js: Inpulse response is ${reverse ? '' : 'not '}reversed.`);
    }
    /**
     * Filter type.
     * @param {BiquadFilterType} type
     */
    filterType(type) {
        this.filterNode.type = this._options.filterType = type;
        console.debug(`Set filter type to ${type}`);
    }
    /**
     * Filter frequency.
     * @param {number} freq
     */
    filterFreq(freq) {
        if (!this.inRange(freq, 20, 5000)) {
            throw new RangeError('Reverb.js: Filter frequrncy must be between 20 and 5000.');
        }
        this._options.filterFreq = freq;
        this.filterNode.frequency.value = this._options.filterFreq;
        console.debug(`Set filter frequency to ${freq}Hz.`);
    }
    /**
     * Filter quality.
     * @param {number} q
     */
    filterQ(q) {
        if (!this.inRange(q, 0, 10)) {
            throw new RangeError('Reverb.js: Filter quality value must be between 0 and 10.');
        }
        this._options.filterQ = q;
        this.filterNode.Q.value = this._options.filterQ;
        console.debug(`Set filter quality to ${q}.`);
    }
    /**
     * return true if in range, otherwise false
     * @private
     * @param {number} x Target value
     * @param {number} min Minimum value
     * @param {number} max Maximum value
     * @return {bool}
     */
    inRange(x, min, max) {
        return (x - min) * (x - max) <= 0;
    }
    /**
     * Utility function for building an impulse response
     * from the module parameters.
     * @private
     */
    buildImpulse() {
        // インパルス応答生成ロジック
        /** @type {number} サンプリングレート */
        const rate = this.ctx.sampleRate;
        /** @type {number} インパルス応答の演奏時間 */
        const length = Math.max(rate * this._options.time, 1);
        /** @type {number} インパルス応答が始まるまでの遅延時間 */
        const delayDuration = rate * this._options.delay;
        /** @type {AudioBuffer} インパルス応答バッファ（今の所ステレオのみ） */
        const impulse = this.ctx.createBuffer(2, length, rate);
        /** @type {Array<number>|ArrayBufferView} 左チャンネル */
        const impulseL = new Float32Array(length);
        /** @type {Array<number>|ArrayBufferView} 右チャンネル*/
        const impulseR = new Float32Array(length);
        for (let i = 0; i < length; i++) {
            /** @type {number} 減衰率 */
            let n = 0;
            if (i < delayDuration) {
                // Delay Effect
                impulseL[i] = 0;
                impulseR[i] = 0;
                n = this._options.reverse
                    ? length - (i - delayDuration)
                    : i - delayDuration;
            }
            else {
                n = this._options.reverse ? length - i : i;
            }
            /** @type {number} 平方根を利用した減衰曲線 */
            const pow = (1 - n / length) ** this._options.decay;
            impulseL[i] = this.getNoise(pow);
            impulseR[i] = this.getNoise(pow);
        }
        // インパルス応答のバッファに生成したWaveTableを代入
        impulse.getChannelData(0).set(impulseL);
        impulse.getChannelData(1).set(impulseR);
        this.convolverNode.buffer = impulse;
    }
    /**
     * Generate white noise
     * @param {number} rate Attenuation rate
     * @return {number}
     * @private
     */
    getNoise(rate) {
        // TODO: 他のカラードノイズを指定できるように
        return (Math.random() * 2 - 1) * rate;
    }
}
exports.default = Reverb;
/**
 * デフォルト値
 */
const optionDefaults = {
    decay: 5,
    delay: 0,
    reverse: false,
    time: 3,
    filterType: 'lowpass',
    filterFreq: 2200,
    filterQ: 1,
    mix: 0.5,
};


/***/ })

/******/ });
});
//# sourceMappingURL=reverb.js.map